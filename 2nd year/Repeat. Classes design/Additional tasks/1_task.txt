Возьмём класс Point из задачи «Равенство и порядок» (в классе должна быть определена проверка на равенство) и попробуем положить несколько точек этого класса во множество или сделать их ключами словаря. Получим ошибку:

>>> points_set = {Point(’A’, 0, 3), Point(’A’, 0, 3)}  
    Traceback (most recent call last):  
      Python Shell, prompt 2, line 1  
    builtins.TypeError: unhashable type: ’Point’
Кстати, если закомментировать метод __eq__, ошибка исчезнет, но во множество добавятся одинаковые на наш взгляд точки.

Дело в том, что проверка на равенство может быть достаточно затратной операцией и, чтобы минимизировать количество сравнений, используется технология хеширования. Наличие свойства hashable у объекта означает, что для него определено специальное неизменное значение (в случае множеств и словарей это целое число), с помощью которого он предварительно быстро сравнивается с другими объектами. Если хеши двух объектов равны, объекты могут быть равны в смысле __eq__ (а могут и не быть), но если хеши различаются, объекты точно различны.

По умолчанию у пользовательских объектов есть хеши, которые строятся на основе их id() и, соответственно, различны для всех объектов. Когда же мы создаём свою реализацию __eq__, такой хеш перестаёт быть актуальным, потому что допускает существование равных (с нашей точки зрения) объектов с различными хешами, что противоречит самой идее хеширования.

Таким образом, чтобы восстановить хеширование, нам надо самим определить метод __hash__. Это несложно сделать, если, следуя рекомендациям из документации, вычислять хеши с помощью функции hash() на основе тех же полей объекта, которые участвуют в сравнении __eq__.

Соответственно, ваша задача — определить метод __hash__ для класса Point.

Формат ввода
Каждый тест представляет собой код, в котором будет использоваться ваш класс.